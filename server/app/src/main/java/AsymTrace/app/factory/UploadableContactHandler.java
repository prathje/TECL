/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package AsymTrace.app.factory;

import AsymTrace.app.model.Contact;
import com.goterl.lazycode.lazysodium.interfaces.Box;
import com.goterl.lazycode.lazysodium.utils.Key;


public class UploadableContactHandler {
/*

    public Upl fromContactMessage(Uploadable) {

        byte[] contactData = identity.getContactData();
        byte[] cipherText = new byte[Box.MACBYTES + contactData.length];

        byte[] nonce = lazySodium.nonce(Box.NONCEBYTES);
        boolean success = lazySodium.cryptoBoxEasy(
                cipherText,
                contactData,
                contactData.length,
                nonce,
                haPublicKey.getAsBytes(),
                identity.getKeyPair().getSecretKey().getAsBytes()
        );

        if (success) {
            return new ContactMessage(
                    identity.getKeyPair().getPublicKey().getAsBytes(),
                    nonce,
                    cipherText,
                    identity.getDisplayData()
            );
        } else {
            return null;
        }
    }

    /**
     * @param haSecretKey        Secret key of the health authority
     * @param encryptedDataTuple (PubKey, Nonce, CipherText)
     * @return
     */
    /*
    public byte[] decrypt(Key haSecretKey, Contact contactBox) {

        byte[] pubKey = contactBox.getPublicKeyBytes();
        byte[] nonce = contactBox.getNonce();
        byte[] ciphertext = contactBox.getCiphertext();

        byte[] message = new byte[ciphertext.length - Box.MACBYTES];

        boolean success = lazySodium.cryptoBoxOpenEasy(
                message,
                ciphertext,
                ciphertext.length,
                nonce,
                pubKey,
                haSecretKey.getAsBytes()
        );

        if (success) {
            return message;
        } else {
            return null;
        }
    }*/
}

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package AsymTrace.app.factory;

import AsymTrace.app.model.ContactUploadMessage;
import AsymTrace.app.model.ContactMessage;
import AsymTrace.app.model.Identity;
import com.goterl.lazycode.lazysodium.LazySodium;
import com.goterl.lazycode.lazysodium.interfaces.Box;
import com.goterl.lazycode.lazysodium.interfaces.SecretBox;
import com.goterl.lazycode.lazysodium.utils.Key;


public class ContactMessageFactory {

    LazySodium lazySodium;

    public ContactMessageFactory(LazySodium lazySodium) {
        this.lazySodium = lazySodium;
    }

    public ContactMessage createFromContactWithNewAdditionalData(ContactMessage contactWithDisplayDataMessage, byte[] additionalData) {

        return new ContactMessage(
                contactWithDisplayDataMessage.getContactPublicKeyBytes(),
                contactWithDisplayDataMessage.getHaNonce(),
                contactWithDisplayDataMessage.getHaCiphertext(),
                additionalData
        );
    }

    public ContactMessage fromContactUploadMessage(ContactUploadMessage contactUploadMessage, Key symmKey) {
        byte[] nonce = contactUploadMessage.getNonce();
        byte[] ciphertext = contactUploadMessage.getCipher();

        int messageLength = ciphertext.length - SecretBox.MACBYTES;
        byte[] message = new byte[messageLength];

        boolean success = lazySodium.cryptoSecretBoxOpenEasy(
                message,
                ciphertext,
                ciphertext.length,
                nonce,
                symmKey.getAsBytes()
        );

        if (success) {
            return ContactMessage.fromBytes(message);
        } else {
            return null;
        }
    }

    public ContactMessage fromIdentity(Identity identity, Key haPublicKey) {

        byte[] contactData = identity.getContactData();
        byte[] cipherText = new byte[Box.MACBYTES + contactData.length];

        byte[] nonce = lazySodium.nonce(Box.NONCEBYTES);
        boolean success = lazySodium.cryptoBoxEasy(
                cipherText,
                contactData,
                contactData.length,
                nonce,
                haPublicKey.getAsBytes(),
                identity.getKeyPair().getSecretKey().getAsBytes()
        );

        if (success) {
            return new ContactMessage(
                    identity.getKeyPair().getPublicKey().getAsBytes(),
                    nonce,
                    cipherText,
                    identity.getDisplayData()
            );
        } else {
            return null;
        }
    }

}

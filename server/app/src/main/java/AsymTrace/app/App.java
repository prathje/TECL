/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package AsymTrace.app;

import AsymTrace.app.factory.*;
import AsymTrace.app.model.AccessUploadMessage;
import AsymTrace.app.model.ContactUploadMessage;
import AsymTrace.app.model.ContactMessage;
import AsymTrace.app.model.Identity;
import com.goterl.lazycode.lazysodium.LazySodiumJava;
import com.goterl.lazycode.lazysodium.SodiumJava;
import com.goterl.lazycode.lazysodium.exceptions.SodiumException;
import com.goterl.lazycode.lazysodium.utils.Key;
import com.goterl.lazycode.lazysodium.utils.KeyPair;

import java.nio.charset.StandardCharsets;

public class App {


    public static void main(String[] args) throws SodiumException {

        LazySodiumJava lazySodium = new LazySodiumJava(new SodiumJava("/Library/Frameworks/libsodium.dylib"));
        // we initialize the parties Alice, Bob, Charlie and the health authority H

        KeyPair aliceKp = lazySodium.cryptoBoxKeypair();
        KeyPair bobKp = lazySodium.cryptoBoxKeypair();
        KeyPair haKp = lazySodium.cryptoBoxKeypair();

        System.out.println("Alice's public key: " + aliceKp.getPublicKey().getAsHexString());
        System.out.println("Bob's public key: " + bobKp.getPublicKey().getAsHexString());
        System.out.println("HA's public key: " + haKp.getPublicKey().getAsHexString());


        // setting up secret contact data for both Alice and Bob
        String alicePrivateData = "Seems like you found me... (I am Alice btw)... My secret telephone number is! ";
        String aliceSharedData = "Alice";
        String bobContactData = "Hey, this is me, Bob! (I might actually be a restaurant?)";
        String bobDisplayData = "Bob";

        Identity bob = new Identity(bobKp, bobContactData.getBytes(StandardCharsets.UTF_8), bobDisplayData.getBytes(StandardCharsets.UTF_8));

        ContactMessage bobContactWithDisplayDataMessage = new ContactMessageFactory(lazySodium).fromIdentity(bob, haKp.getPublicKey());

        System.out.println("bobExchangeData size (bytes): " + bobContactWithDisplayDataMessage.toBytes().length);
        // we check that the HA could read Bob's exchange data
        /*{
            ShareDataMessage newShareDataMessage = ShareDataMessage.fromBytes(bobShareDataMessage.toBytes());
            ShareData bobShareData = (new ShareDataHandler(lazySodium)).decrypt(newShareDataMessage);
            System.out.println("HA could decrypt with this information: " + new String(decodedContactData, StandardCharsets.UTF_8));
        }*/

        // Alice now stores Bob's data in a SecretBox (symmetrically (!))
        // Using a symmetric key allows everyone in the Group to access the same data


        Key symmKey = lazySodium.cryptoSecretBoxKeygen();
        ContactMessage bobContactMessage = new ContactMessageFactory(lazySodium).createFromContactWithNewAdditionalData(bobContactWithDisplayDataMessage, "start: test".getBytes(StandardCharsets.UTF_8));

        ContactUploadMessage contactUploadMessage = (new ContactUploadMessageFactory(lazySodium)).fromContactMessage(bobContactMessage, symmKey);
        System.out.println("contactUploadMessage size: " + contactUploadMessage.toBytes().length);

        // test that Alice can successfully decrypt the secretBox
        ContactMessage restoredContactMessage = new ContactMessageFactory(lazySodium).fromContactUploadMessage(contactUploadMessage, symmKey);

        System.out.println("Alice could decipher the same?: " + restoredContactMessage.toBytes().equals(bobContactMessage.toBytes()));

        // we now (asymmetrically) encrypt the symmetricKey for Bob again, this time using a sealed box to hide the uploader
        // Alice has the capability to set start time and duration for each other group member (TODO: Is this a good idea?)

        int startTimestamp = 42;
        int duration = 1337;

        String asymMessage = String.valueOf(startTimestamp) + "-" + String.valueOf(duration);
        System.out.println("AsymMsg length: " + asymMessage.length());
        AccessUploadMessage accessUploadMessage = new AccessUploadMessageFactory(lazySodium).create(bobKp.getPublicKey(), symmKey);
        System.out.println("bobHaUploadData length: " + accessUploadMessage.toBytes().length);

        // check that Bob would be able to decrypt this anonymous message
        Key symmKeyBytes = new AccessUploadMessageFactory(lazySodium).decrypt(accessUploadMessage, bobKp);

        System.out.println("bob could decrypt asym: " + symmKeyBytes.equals(symmKey.getAsBytes()));
        System.out.println("Total Upload Data for one entry: " + (bobContactMessage.toBytes().length + accessUploadMessage.toBytes().length));
    }
}
